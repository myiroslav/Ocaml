README Slavik Bourguignon

when inside the folder , make ( or make clean then make).
To compile the C-- code :
./mcc yourfile.c
to print the assembly code generated by my compiler :
./mcc -E yourfile.c
to print the parser tree (of cparse.ml). This tree is generated by cprint.ml . It is not fully completed, as I wrote it mainly
to understand things that were not clear to me, considering the functionning of the parser. 
./mcc -A yourfile.c

There is a few examples in the Exemple folder, some I've written myself to test a few very basic things (addition for example), 
and other slightly more sophisticated (fact.c for example).

A file unitest0vf.c where all the semantic of C- is tested. 

To gett the assembly file .s generated by my compiler :
./comparator.sh yourfile.c

It generates a few .s files, one is the one generated by gcc, the other one is the one generated by my compiler. Mine is of course not optimal at all, hence, much longer. 

My compiler is in compile.ml, cparse.mli is really useful to fully understant the tree generated by the parser.
The perser was given. I only wrote compile.ml

The compiler doesn't handle errors, it was supposed to be the second part of the project, however, because the format of the course was radically modified, and the number of lesson, 
reduced this part was cancelled. But the Error.locator are still there. 




Environment handling: 
	The environment stores the variables with their name (a string), and their location in the stack (int option : None if the variable is global). Hence, it is a [(string * int option) list]

	Every [compile_*] returns an environment, so that it can store the modification of the environment during the traversal of the Abstract Syntax Tree (AST). 

Arguments that the [compile_*] have in common
	[out] : the file where the assembly code is written
	
	[list_fun] : the list of the created functions in the C code, as well as [malloc] and 4 other special functions.

[compile_*] also takes a [loc_*] in argument 

The [list_loc_*] are handled thanks to the [List.fold_left] operator (since compile_* returns an [environnement] and not [unit], I don't use [List.iter]).

The [compile_*] are mutually recursive, to match the types defined in the parser.  

Because of the definitions of C--, CFUN can only be at depth 1 in the AST, at the same level where the global variables are declared thanks to a CDECL. Hence, it was considered as a special case
at this depth of the AST, with a separation ( [List.partition]) that let me handle separately the declaration of the global variables, the function headers, and then handle the arguments : 
they are computed from right to left, and the first 6 are put inside the corresponding registers, while the next ones are pushed on the stack. 

find_var str env :
	returns a string that gives the location inside the stack of the variable str. It stops at the first corresponding name. It is coherent with the variable scope.
If the variable is global, returns str(%rip). 



	
